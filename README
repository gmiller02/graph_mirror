graph README

Handin: This is my final handin

Design Choices: I made a major design choice in the PageRank part of my graph. I liked working with decorators a lot in
my Prim-Jarnik algorithm, so I decided to continue to use it in my PageRank because using decorators makes more sense to
me while working with a graph.
In my Prim Jarnik, I was heavily inspired by the lecture psuedocode and created three decorators to use. One decorator,
dist, keeps track of the cost of all of my verticies. The second decorator, prev, keeps track of the changes that are
made in the algorithem, because when we update one vertex, all of the previous ones are affected. The third decorator,
entry, helps keep track of the entries in the PriorityQueue that are associated with each vertex.

The PJ decorator method worked so well for me that I decided to adapt the PageRank algorithm from lecture to use decorators instead
of an Arraylist. To do that, I created two decorators. The first one, rank, keeps track of the current rank of each
vertex in the directed graph. The second decorator, prev, (just as in PrimJarnik), keeps track of the changes that are
made when the algorithm updates the rank. Additionally, like in PrimJarnik, I created several iterators that went through
all of the vertices in the graph so that I could decorate them with rankings.

Tests: I made sure to test all of my exceptions and most of my methods for my matrix. For my MSF, I tested to see if my
algorithm could handle a much larger graph and a graph that was disconnected.

Known bugs: My math is slightly off in my Pagerank, which results in my algorithm not passing the second test. The
numbers I get are very close, but not exactly like the demo when I run it. I went though my math numerous times but
could not find where I went wrong on my calculations.

Because of this error, I know that the tests I wrote for MyPageRank will not pass. However, I tried to re-create them
on the demo and asserted what I observed to be true.

Conceptual Question: In order to solve this equation, I think that we could create an index that would assign all pages
a value in between zero and one. This way, no vertex would be assaigned zero and have to be removed from the graph. The
verticies with the lowest decimal scores would be ranked lower and be less credible, and the verticies with higher
decimal scores would be ranked higher and be more credible.
